import{_ as a,r as l,o as c,c as n,b as t,e as o,w as r,d,a as i}from"./app-b3126609.js";const s={},h=t("h1",{id:"命名规范",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#命名规范","aria-hidden":"true"},"#"),d(" 命名规范")],-1),u={class:"table-of-contents"},_=i('<h2 id="目录和文件" tabindex="-1"><a class="header-anchor" href="#目录和文件" aria-hidden="true">#</a> 目录和文件</h2><ul><li><strong>类库、函数</strong>文件统一以.php 为后缀。</li><li><strong>类</strong>的文件名均以<strong>命名空间</strong>定义，并且命名空间的路径和类库文件所在路径一致。</li><li><strong>类</strong>（包含接口和 Trait）文件采用大驼峰法命名<code>MyFile.php</code>，其它文件采用小写+下划线名<code>my_file.ini</code>；</li><li><strong>类名</strong>（包括接口和 Trait）和文件名保持一致，统一采用大驼峰法命名（首字母大写）<code>MyFile</code>；</li></ul><h2 id="类和接口命名" tabindex="-1"><a class="header-anchor" href="#类和接口命名" aria-hidden="true">#</a> 类和接口命名</h2><ul><li><strong>类的</strong>的命名使用大驼峰法（首字母大写），例如：<code>Cards、Index</code>；</li><li><strong>方法</strong>的命名使用<code>m</code>+<code>前缀</code>+小驼峰法（首字母小写），例如： <code>mStringGetIP</code>；</li><li><strong>属性</strong>的命名使用<code>attr</code>+<code>前缀</code>+大驼峰法（首字母小写），例如：<code>attrGReqTime、attrGReqIp</code>；</li><li><strong>特例</strong>：以双下划线<code>__</code>打头的函数或方法作为魔术方法，例如： <code>__call</code>和 <code>__autoload</code>；</li></ul><h2 id="变量和函数命名" tabindex="-1"><a class="header-anchor" href="#变量和函数命名" aria-hidden="true">#</a> 变量和函数命名</h2><ul><li><strong>变量</strong>的命名使用小驼峰<code>前缀</code>+下划线<code>_</code> +大驼峰简意（首字母小写），例如：<code>lDef_Result、tDef_AdminListMax</code></li><li><strong>函数</strong>的命名使用<code>f</code>+<code>前缀</code>+大驼峰简意（首字母小写），例如：<code>fArrayGetChartData</code></li></ul><h2 id="常量和配置" tabindex="-1"><a class="header-anchor" href="#常量和配置" aria-hidden="true">#</a> 常量和配置</h2><ul><li><strong>常量</strong>以大写字母和下划线命名，例如 <code>APP_PATH</code>；</li><li><strong>配置参数</strong>以小写字母和下划线命名，例如 <code>url_route_on</code> 和<code>url_convert</code>；</li><li><strong>环境变量</strong>定义使用大写字母和下划线命名，例如<code>APP_DEBUG</code>；</li></ul><h2 id="数据库表和字段命名" tabindex="-1"><a class="header-anchor" href="#数据库表和字段命名" aria-hidden="true">#</a> 数据库表和字段命名</h2><ul><li><strong>表名</strong>使用小写字母，使用下划线 <code>_</code> 连接单词，例如：<code>my_table</code>。</li><li><strong>字段名</strong>同样使用小写字母，使用下划线 <code>_</code> 连接单词，例如：<code>my_column</code>。</li></ul><h2 id="前缀说明" tabindex="-1"><a class="header-anchor" href="#前缀说明" aria-hidden="true">#</a> 前缀说明</h2><h3 id="_1-方法与函数的前缀" tabindex="-1"><a class="header-anchor" href="#_1-方法与函数的前缀" aria-hidden="true">#</a> 1.方法与函数的前缀</h3><table><thead><tr><th>区分段</th><th>依<code>返回</code>分类段</th><th>依<code>内部实现</code>分类段</th><th>依<code>用意</code>分类段</th></tr></thead><tbody><tr><td>m：方法</td><td>Array：仅返回数组为直接结果，如<code>[0 =&gt; data1, 1 =&gt; data2]</code> || false</td><td>Get：从数据库或文件读取数据</td><td>Now：当前鉴权情况下的唯一</td></tr><tr><td>f：函数</td><td>Bool：仅返回布尔为直接结果，如<code>false</code></td><td>Generate：无中生有，如 UUID 生成</td><td></td></tr><tr><td></td><td>String：仅返回字符串为直接结果，如 UUID 生成返回的结果<code>4hrf783fh8934uhj984u389</code></td><td>Cover：从数据库或文集更新或写入数据数据</td><td></td></tr><tr><td></td><td>//Remind：返回数组包含判断结果与直接结果，标准格式如<code>[false,&#39;非法操作&#39;]</code></td><td>Easy：简单实现</td><td></td></tr><tr><td></td><td>Result：返回布尔或直接返回数组、结果等等，如<code>false</code>/<code>[name=&gt;&#39;xxxx&#39;]</code>，<code>false</code>/<code>成功</code></td><td></td><td></td></tr><tr><td></td><td>Object：返回方法或对象</td><td></td><td></td></tr><tr><td></td><td>Void：不做返回</td><td></td><td></td></tr></tbody></table><h3 id="_2-存储单位的前缀" tabindex="-1"><a class="header-anchor" href="#_2-存储单位的前缀" aria-hidden="true">#</a> 2.存储单位的前缀</h3><table><thead><tr><th>区分段</th><th>依<code>要求作用域</code>分类段</th><th>依<code>定义由来</code>分类段</th><th>依<code>用意</code>分类段</th></tr></thead><tbody><tr><td>attr</td><td>G：可写，可变，如：$attrGReqTime</td><td>Req：request 请求</td><td>Now：当前鉴权情况下的唯一</td></tr><tr><td></td><td>T：只读，不可变，如：中间件 中的 $request as $var_t_def_request</td><td>Res：response 响应</td><td></td></tr><tr><td></td><td>//L：只写，可变，如：$attrLDefAdminAllData</td><td>Def：Define 内部产生</td><td></td></tr></tbody></table><h3 id="_3-前缀使用注意" tabindex="-1"><a class="header-anchor" href="#_3-前缀使用注意" aria-hidden="true">#</a> 3.前缀使用注意</h3><ul><li><p>使用前缀时要求先遵循对应的命名规范，将前缀放于命名的合适位置</p></li><li><p>当一个外部存储单位传入时，可相对于 当前的全局 该 存储单位 的使用范围，重新为其命名，若适用范围依然适用于原名可不变</p></li><li><p>前缀要求必须按表格<strong>从左至右</strong>按<strong>分类段</strong>组合，不强制要求完全使用上每一个<strong>分类段</strong>可掐头或去尾，但我们不建议这么做并且一般来说也不允许间隔使用<strong>分类段</strong></p></li></ul>',17);function g(f,m){const e=l("router-link");return c(),n("div",null,[h,t("nav",u,[t("ul",null,[t("li",null,[o(e,{to:"#目录和文件"},{default:r(()=>[d("目录和文件")]),_:1})]),t("li",null,[o(e,{to:"#类和接口命名"},{default:r(()=>[d("类和接口命名")]),_:1})]),t("li",null,[o(e,{to:"#变量和函数命名"},{default:r(()=>[d("变量和函数命名")]),_:1})]),t("li",null,[o(e,{to:"#常量和配置"},{default:r(()=>[d("常量和配置")]),_:1})]),t("li",null,[o(e,{to:"#数据库表和字段命名"},{default:r(()=>[d("数据库表和字段命名")]),_:1})]),t("li",null,[o(e,{to:"#前缀说明"},{default:r(()=>[d("前缀说明")]),_:1}),t("ul",null,[t("li",null,[o(e,{to:"#_1-方法与函数的前缀"},{default:r(()=>[d("1.方法与函数的前缀")]),_:1})]),t("li",null,[o(e,{to:"#_2-存储单位的前缀"},{default:r(()=>[d("2.存储单位的前缀")]),_:1})]),t("li",null,[o(e,{to:"#_3-前缀使用注意"},{default:r(()=>[d("3.前缀使用注意")]),_:1})])])])])]),_])}const x=a(s,[["render",g],["__file","NamingConvention.html.vue"]]);export{x as default};
